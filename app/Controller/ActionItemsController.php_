<?php
/**
 * Action controller.
 *
 * This file will render views from views/actions/
 *
 * PHP 5
 *
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright     Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link          http://cakephp.org CakePHP(tm) Project
 * @package       app.Controller
 * @since         CakePHP(tm) v 0.2.9
 * @license       http://www.opensource.org/licenses/mit-license.php MIT License
 */
 App::uses('CakeEmail', 'Network/Email');
 /**
 * Email sender
 */
 App::uses('AppController', 'Controller');
 /**
 * Action controller
 *
 *
 * @package       app.Controller
 * @link http://book.cakephp.org/2.0/en/controllers/pages-controller.html
 */
class ActionItemsController extends AppController{
    var $uses = array('Amenity', 'Group','City','Channel','Project','Lead','Builder','Role','ActionItem','ActionItemType','Remark','Channel','ActionItemLevel','LookupValueProjectUnitType','LookupValueActionItemRejection','LookupValueActionItemReturn','LeadStatus','Suburb','Area','User','LookupValueCallQuality','LookupValueLeadsCountry','LookupValueLeadsClosureProbability','LookupValueLeadsUrgency','LookupValueLeadsSegment','LookupValueLeadsCountry','LookupValueLeadsImportance','LookupValueLeadsType','LookupValueLeadsProgress','LookupValueLeadsCurrency','LookupValueProjectUnitPreference','LookupValueProjectPhase','CallingReport','BuilderContact','Event','Reimbursement','LookupValueActivityDetail','LookupValueReimbursementType_1','LookupValueActivityLevel','LookupValueBillStatus','LookupValueBillType','LookupValueReimbursementType_2','ProjectUnit','ProjectContact');
    
	public $components = array('Sms');
    
	public function index(){
	    
		$dummy_status = $this->Auth->user('dummy_status');
		$role_id = $this->Session->read("role_id");
		$channel_id = $this->Session->read("channel_id");
		$channels = $this->Channel->findById($channel_id);
		$channel_head = $channels['Channel']['channel_head'];
		$user_id = $this->Auth->user('id');
		$city_id = $channels['Channel']['city_id'];
		$roles = $this->Role->find('all',array('conditions' => 'Role.id = '.$role_id));
		$this->set(compact('roles'));
		$group_user = $roles[0]['Role']['id'];
		$search_condition = array();

	if ($this->request->is('post') || $this->request->is('put')) {
	    
	    if (!empty($this->data['ActionItem']['global_search'])) {
		$search = $this->data['ActionItem']['global_search'];      
		   
		array_push($search_condition, array('OR' => array($this->Lead->getVirtualField('fullname') . ' LIKE' => "%". mysql_escape_string(trim(strip_tags($search))) . "%", 'Project.project_name' . ' LIKE' => "%".mysql_escape_string(trim(strip_tags($search))) . "%", 'Builder.builder_name' . ' LIKE' => "%".mysql_escape_string(trim(strip_tags($search))) . "%")));
		
	    }
	    
	    if (!empty($this->data['ActionItem']['action_item_level_id'])) {
				$search = $this->data['ActionItem']['action_item_level_id'];
				array_push($search_condition, array('ActionItem.action_item_level_id' => mysql_escape_string(trim(strip_tags($search)))));
	    }
		
	    if (!empty($this->data['ActionItem']['type_id'])) {
				$search = $this->data['ActionItem']['type_id'];
				array_push($search_condition, array('ActionItem.type_id' => mysql_escape_string(trim(strip_tags($search)))));
	    }
		
	    if (!empty($this->data['ActionItem']['lead_status'])) {
				$search = $this->data['ActionItem']['lead_status'];
				array_push($search_condition, array('Lead.lead_status' => mysql_escape_string(trim(strip_tags($search)))));
	    }
	}
	
	if($dummy_status)
	    array_push($search_condition, array('ActionItem.dummy_status' => $dummy_status));
	  
	  if(count($this->params['pass']))
		 	array_push($search_condition, array('ActionItem.action_item_level_id' => $this->params['pass'][0])); // when builder is approve/pending
	 
		$this->paginate['conditions'][0] = "ActionItem.action_item_active='Yes' AND ActionItem.next_action_by = ".$user_id."";
		$this->paginate['conditions'][1] = $search_condition;
		$this->paginate['order'] = array('ActionItem.id' => 'desc');	
		$this->set('actionitems',$this->paginate("ActionItem"));
	  
	     //$log = $this->ActionItem->getDataSource()->getLog(false, false);       
       //  debug($log);
		// die;
       // pr($actionitems);
	  
	$all_action = $this->ActionItem->find('count',array('conditions' => array('OR' => array('ActionItem.next_action_by' => $user_id,'ActionItem.created_by_id'=>$user_id))));
	$this->set(compact('all_action'));
	
	$all_action_pending = $this->ActionItem->find('count',array('conditions' => array('ActionItem.next_action_by' => $user_id,'ActionItem.action_item_active' => 'Yes')));
	$this->set(compact('all_action_pending'));
	
	
	$builder_action_pending = $this->ActionItem->find('count',array('conditions' => array('ActionItem.action_item_active' => 'Yes','ActionItem.action_item_level_id' => '2','ActionItem.next_action_by' => $user_id)));
	$this->set(compact('builder_action_pending'));
	
	$project_action_pending = $this->ActionItem->find('count',array('conditions' => array('ActionItem.action_item_active' => 'Yes','ActionItem.action_item_level_id' => '3','ActionItem.next_action_by' => $user_id)));
	$this->set(compact('project_action_pending'));
	
	$client_action_pending = $this->ActionItem->find('count',array('conditions' => array('ActionItem.action_item_active' => 'Yes','ActionItem.action_item_level_id' => '1','ActionItem.next_action_by' => $user_id)));
	$this->set(compact('client_action_pending'));
	
	$client_allaction_pending = $this->ActionItem->find('count',array('conditions' => array('OR' => array('ActionItem.action_item_level_id' => '1','ActionItem.action_item_level_id' => '10'),'ActionItem.action_item_active' => 'Yes','ActionItem.next_action_by' => $user_id)));
	$this->set(compact('client_allaction_pending'));
	
	$client_oldaction_pending = $this->ActionItem->find('count',array('conditions' => array('ActionItem.action_item_active' => 'Yes','ActionItem.action_item_level_id' => '10','ActionItem.next_action_by' => $user_id)));
	$this->set(compact('client_oldaction_pending'));
	
	$client_newaction_pending = $this->ActionItem->find('count',array('conditions' => array('ActionItem.action_item_active' => 'Yes','ActionItem.action_item_level_id' => '1','ActionItem.next_action_by' => $user_id)));
	$this->set(compact('client_newaction_pending'));
	
	$action_level = $this->ActionItemLevel->find('list',array('fields' => array('id','level'),'order' => 'level asc'));
	$this->set(compact('action_level'));
	
	$status = $this->LeadStatus->find('list',array('fields' => array('id','status')));
	$this->set(compact('status'));
	
	$action_type = $this->ActionItemType->find('list',array('fields' => array('id','type'),'order' => 'type asc'));
	$this->set(compact('action_type'));
	
	$returns = $this->LookupValueActionItemReturn->find('list', array('fields' => 'id, value', 'order' => 'value ASC'));
	$this->set(compact('returns'));

  }
    
    public function add($actio_itme_id = null) {
         $this->layout = '';

		 /***********Checking user************/
		$dummy_status = $this->Auth->user('dummy_status');		 
		$channel_id = $this->Session->read("channel_id");
		$channels = $this->Channel->findById($channel_id);
		$channel_head = $channels['Channel']['channel_head'];
		$channel_city_id = $channels['Channel']['city_id'];
		$user_id = $this->Auth->user('id');
		$role_id = $this->Session->read("role_id");
		$roles = $this->Role->find('all',array('conditions' => 'Role.id = '.$role_id));
		$group_user = $roles[0]['Role']['id'];
		$id = $this->Auth->user("id");
		$condition_dummy_status = array('dummy_status' => $dummy_status);
		$general_exu_id = '';
		$type = '';
		
		
		$actionitems = $this->ActionItem->findById($actio_itme_id);
		$this->set(compact('actionitems')); 
		$city_id = $actionitems['Lead']['city_id'];
		 
		if($actionitems['ActionItem']['action_item_level_id'] == '2')
		  		$this->set('user_type','Builder');
			else if($actionitems['ActionItem']['action_item_level_id'] == '3')
		  		$this->set('user_type','Project');
			else if($actionitems['ActionItem']['action_item_level_id'] == '5')
		  		$this->set('user_type','Builder Contact');	
			else if($actionitems['ActionItem']['action_item_level_id'] == '9')
		  		$this->set('user_type','Expenses');	
			else
				$this->set('user_type',$actionitems['ActionItemLevel']['level']); 
        
		 if($role_id == '4' && $actionitems['ActionItem']['type_id'] == '8' && ($actionitems['ActionItem']['action_item_level_id'] == '1' || $actionitems['ActionItem']['action_item_level_id'] == '10')){ //cheking for Global Administration Channel or Global Business Admin Channel from chennels table   
		  		$this->set('user_type','Global');
				$type = $this->ActionItemType->find('list',array('fields' => array('id','type'),'conditions' =>'ActionItemType.id = 5 OR ActionItemType.id = 9 OR ActionItemType.id = 8'));
		  }
		else if($role_id == '4' && $actionitems['ActionItem']['type_id'] == '10' && ($actionitems['ActionItem']['action_item_level_id'] == '1' || $actionitems['ActionItem']['action_item_level_id'] == '10')){ //cheking for Global Administration Channel or Global Business Admin Channel from chennels table   
		  		$this->set('user_type','Global');
				$type = $this->ActionItemType->find('list',array('fields' => array('id','type'),'conditions' =>'ActionItemType.id = 5 OR ActionItemType.id = 9'));
		  } 
		 else if($role_id == '4'){ //cheking for Global Administration Channel or Global Business Admin Channel from chennels table   
		  		//$this->set('user_type','Global');
				$type = $this->ActionItemType->find('list',array('fields' => array('id','type'),'conditions' =>'ActionItemType.id = 4 OR ActionItemType.id = 9 OR ActionItemType.id = 8'));
		  }
		  else if($role_id == '7'){ //cheking for Global Administration Channel or Global Business Admin Channel from chennels table   
		  		$this->set('user_type','Global');
				$type = $this->ActionItemType->find('list',array('fields' => array('id','type'),'conditions' =>'ActionItemType.id = 3 OR ActionItemType.id = 8'));
		  }
		  
		  else if($role_id == '10' || $role_id == '27')
		  {
		  			
				$type = $this->ActionItemType->find('list',array('fields' => array('id','type'),'conditions' =>'ActionItemType.id = 6 OR ActionItemType.id = 8'));
		  }
		  
		  /*
		  elseif($group_user == '7' ){ // FOR PRIMARY MANAGER
		   		$this->set('user_type','Execution');
				$type = $this->ActionItemType->find('list',array('fields' => array('id','type'),'conditions' =>'ActionItemType.id = 3  OR ActionItemType.id = 8'));
		   }
		   
		  elseif($group_user == '8' ){ // FOR TEAM MEMBER
				$this->set('user_type','Team');
				$type = $this->ActionItemType->find('list',array('fields' => array('id','type'),'conditions' =>'ActionItemType.id = 3 OR ActionItemType.id = 8')); // 2 = Acceptance , 8 = Return of action_item_types
			}*/
		else{ // FOR DDATA GLOBAL
				$this->set('user_type','Global');
				$type = $this->ActionItemType->find('list',array('fields' => array('id','type'),'conditions' =>'ActionItemType.id = 10')); // 10 = Re-Submission For Approval
			}	
			
			
        $this->set(compact('type'));

        
       // die;
         

        if ($this->request->is('post')) {
		
			/**************This data is common features *****************************************/
		
				$this->request->data['ActionItem']['parent_action_item_id'] = $actio_itme_id;
				$this->request->data['ActionItem']['dummy_status'] = $dummy_status;
				$this->request->data['ActionItem']['action_item_created'] = date('Y-m-d');
				$this->request->data['ActionItem']['created_by_id'] = $id;
				$this->request->data['ActionItem']['action_item_active'] = 'Yes';
				$this->request->data['ActionItem']['created_by'] = $id;
				$this->request->data['Remark']['remarks_time'] = date('g:i A');
				$this->request->data['Remark']['remarks_by'] = $id;
				$this->request->data['Remark']['created_by'] = $id;
				$this->request->data['Remark']['remarks_date'] = date('Y-m-d');
				$this->request->data['Remark']['dummy_status'] = $dummy_status;
				$this->request->data['ActionItem']['action_item_source'] =  $role_id;
				$this->request->data['ActionItem']['action_industry'] =  '1'; // for realestate of lookup_value_activity_industry
				
				
				
				if($actionitems['ActionItem']['action_item_level_id'] == 1 || $actionitems['ActionItem']['action_item_level_id'] == 10 ){ // for client
					$this->request->data['ActionItem']['lead_id'] =  $actionitems['ActionItem']['lead_id'];	
					$this->request->data['Remark']['remarks_level'] = '3'; //3 for client from lookup_value_remarks_level
					$this->request->data['Remark']['lead_id'] = $actionitems['ActionItem']['lead_id'];	
					
					if($this->data['ActionItem']['type_id'] == 9)
						$this->request->data['Lead']['lead_status'] = '6'; // for Dropped
					
					if($this->data['ActionItem']['type_id'] == 4)
						$this->request->data['Lead']['lead_status'] = '2'; // for allcated	
						
					if($this->data['ActionItem']['type_id'] == 10 ){ // Re-submission
						$this->request->data['Lead']['lead_status'] = '9'; // for Re-submitted	
						$next_action_by = '146';
						$this->request->data['ActionItem']['description'] = 'Client Re-submission by '.strtoupper($this->User->Username($user_id)).' to '.strtoupper($this->User->Username(146)).' because of reason - '.strtoupper($this->data['ActionItem']['other_return']);
						$this->request->data['Remark']['remarks'] = 'Client Re-submission  by '.strtoupper($this->User->Username($user_id)).' to '.strtoupper($this->User->Username(146)).' because of reason - '.strtoupper($this->data['ActionItem']['other_return']);
						}
						
					if($this->data['ActionItem']['type_id'] == 8){
						$this->request->data['Lead']['lead_status'] = '5'; // for return	
						$this->request->data['Lead']['lead_managersecondary'] = NULL;
						$this->request->data['Lead']['lead_managerprimary'] = NULL;
						$this->request->data['Lead']['lead_channel'] = NULL;
					}
					
				}
				
				if($actionitems['ActionItem']['action_item_level_id'] == 2 ){ // for builder
					$this->request->data['ActionItem']['builder_id'] =  $actionitems['ActionItem']['builder_id'];	
					$this->request->data['Remark']['remarks_level'] = '1'; //1 for builder from lookup_value_remarks_level
					$this->request->data['Remark']['builder_id'] = $actionitems['ActionItem']['builder_id'];
					$this->request->data['Builder']['builder_approved'] = '1'; // for approved
					$next_action_by = '136';
				}
				
				if($actionitems['ActionItem']['action_item_level_id'] == 5 ){ // for builder contact
					$this->request->data['ActionItem']['builder_contact_id'] =  $actionitems['ActionItem']['builder_contact_id'];	
					$this->request->data['Remark']['remarks_level'] = '4'; //4 for builder contact from lookup_value_remarks_level
					$this->request->data['Remark']['project_id'] = $actionitems['ActionItem']['project_id'];	
					$this->request->data['BuilderContact']['builder_contact_approved'] = '1'; // for approved
					$this->request->data['BuilderContact']['builder_contact_approved_by'] = $user_id; // for approved
					$this->request->data['BuilderContact']['builder_contact_approved_date'] =  "'".date('Y-m-d')."'"; // for approved
					$next_action_by = '136';
				}
				if($actionitems['ActionItem']['action_item_level_id'] == 7 ){ // for project contact
					$this->request->data['ActionItem']['project_contact_id'] =  $actionitems['ActionItem']['project_contact_id'];	
					$this->request->data['Remark']['remarks_level'] = '5'; //4 for project contact from lookup_value_remarks_level
					$this->request->data['Remark']['project_id'] = $actionitems['ActionItem']['project_id'];	
					$this->request->data['ProjectContact']['project_contact_status'] = '1'; // for approved
					$this->request->data['ProjectContact']['project_contact_approved_by'] = $user_id; // for approved
					$this->request->data['ProjectContact']['project_contact_approved_date'] =  "'".date('Y-m-d')."'"; // for approved
					$next_action_by = '136';
				}
				
				if($actionitems['ActionItem']['action_item_level_id'] == 11 ){ // for project unit
					$this->request->data['ActionItem']['project_unit_id'] =  $actionitems['ActionItem']['project_unit_id'];	
					$this->request->data['Remark']['remarks_level'] = '6'; //6 for Project Unit from lookup_value_remarks_level
					$this->request->data['Remark']['project_unit_id'] = $actionitems['ActionItem']['project_unit_id'];	
					$this->request->data['ProjectUnit']['unit_status'] = '1'; // for approved
					$next_action_by = '136';
				}
				
				if($actionitems['ActionItem']['action_item_level_id'] == 3 ){ // for project
					$this->request->data['ActionItem']['project_id'] =  $actionitems['ActionItem']['project_id'];	
					$this->request->data['Remark']['remarks_level'] = '2'; //2 for project from lookup_value_remarks_level
					$this->request->data['Remark']['project_id'] = $actionitems['ActionItem']['project_id'];	
					$this->request->data['Project']['proj_approved'] = '1'; // for approved
					$next_action_by = '136';
					if($actionitems['ActionItem']['screen_no'] == 'SC-1')
						$this->request->data['Project']['proj_active_primary'] = '0'; // screen primary info.
					if($actionitems['ActionItem']['screen_no'] == 'SC-2')
						$this->request->data['Project']['proj_active_details'] = '0'; // screen details.
					if($actionitems['ActionItem']['screen_no'] == 'SC-4')
						$this->request->data['Project']['proj_active_amenities'] = '0'; // screen amenities.		
				}
				
				
				
				if($this->data['ActionItem']['type_id'] == 8){ // for return
					$this->request->data['ActionItem']['action_item_status'] = '8'; // 8 for Return of lookup_value_action_item_statuses
					
					
					if($actionitems['ActionItem']['action_item_level_id'] == 1 || $actionitems['ActionItem']['action_item_level_id'] == 10 ){ // for client
						
						if($role_id == '4'){
							$this->request->data['ActionItem']['next_action_by'] = $this->getParentNode($actionitems['ActionItem']['lead_id']);
						$this->request->data['ActionItem']['description'] = 'Client Returned by '.strtoupper($this->User->Username($user_id)).' to '.strtoupper($this->User->Username($this->getParentNode($actionitems['ActionItem']['lead_id']))).' because of reason - '.strtoupper($this->data['ActionItem']['other_return']);
						$this->request->data['Remark']['remarks'] = 'Client Returned by '.strtoupper($this->User->Username($user_id)).' to '.strtoupper($this->User->Username($this->getParentNode($actionitems['ActionItem']['lead_id']))).' because of reason - '.strtoupper($this->data['ActionItem']['other_return']);
							
							}
						else{
							$this->request->data['ActionItem']['next_action_by'] = $actionitems['ActionItem']['created_by'];
						$this->request->data['ActionItem']['description'] = 'Client Returned by '.strtoupper($this->User->Username($user_id)).' to '.strtoupper($this->User->Username($actionitems['ActionItem']['created_by'])).' because of reason - '.strtoupper($this->data['ActionItem']['other_return']);
						$this->request->data['Remark']['remarks'] = 'Client Returned by '.strtoupper($this->User->Username($user_id)).' to '.strtoupper($this->User->Username($actionitems['ActionItem']['created_by'])).' because of reason - '.strtoupper($this->data['ActionItem']['other_return']);
						}
						
					}
					else{
					
						$this->request->data['ActionItem']['description'] = 'Return';
						$this->request->data['Remark']['remarks'] = 'Rrturn';
						$this->request->data['ActionItem']['next_action_by'] = $actionitems['ActionItem']['created_by'];
					}
					
					
				}
				
				if($this->data['ActionItem']['type_id'] == 9){ // for rejection
    				
					$this->request->data['ActionItem']['next_action_by'] = NULL;
					$this->request->data['ActionItem']['action_item_status'] = '9'; // for rejection of lookup_value_action_item_statuses
					
					if($actionitems['ActionItem']['action_item_level_id'] == 1 || $actionitems['ActionItem']['action_item_level_id'] == 10 ){ // for client
						$this->request->data['ActionItem']['description'] = 'Client Rejected by '.strtoupper($this->User->Username($user_id)).' because of reason '.strtoupper($this->data['ActionItem']['other_rejection']);
						$this->request->data['Remark']['remarks'] = 'Client Rejected by '.strtoupper($this->User->Username($user_id)).' because of reason '.strtoupper($this->data['ActionItem']['other_rejection']);
					}
					else{
						$this->request->data['ActionItem']['description'] = 'Rejection';
						$this->request->data['Remark']['remarks'] = 'Rejection';
					}
				}
				
				if($this->data['ActionItem']['type_id'] == 2){  // 2 for acceptance.
					$this->request->data['ActionItem']['description'] = 'Acceptance';
					$this->request->data['Remark']['remarks'] = 'Acceptance';
					$this->request->data['Lead']['lead_status'] = '4'; // 4 for Activation of lookup_value_leads_statuses
					$this->request->data['ActionItem']['next_action_by'] = NULL;
					$this->request->data['ActionItem']['action_item_status'] = '2'; // for acceptance of lookup_value_action_item_statuses
	      		}
				
				if($this->data['ActionItem']['type_id'] == 4){  // 4 for Allocation.
					$this->request->data['Lead']['lead_managerprimary'] = $this->request->data['ActionItem']['primary_manager_id'];
					$this->request->data['ActionItem']['next_action_by'] = $this->request->data['ActionItem']['primary_manager_id'];
					$this->request->data['Lead']['lead_status'] = '2'; // for allocated of lead_statues
					$this->request->data['Lead']['lead_channel'] = $this->data['ActionItem']['allocated_channel_id'];
					$this->request->data['ActionItem']['description'] = 'Client Allocated by '.strtoupper($this->User->Username($user_id)).' to '.strtoupper($this->User->Username($this->request->data['ActionItem']['primary_manager_id']));
					$this->request->data['ActionItem']['builder_id'] = NULL;
					$this->request->data['ActionItem']['project_id'] = NULL;	
					$this->request->data['Remark']['remarks'] = 'Client Allocated by '.strtoupper($this->User->Username($user_id)).' to '.strtoupper($this->User->Username($this->request->data['ActionItem']['primary_manager_id']));
					$this->request->data['ActionItem']['action_item_status'] = '4'; // for Allocation of lookup_value_action_item_statuses
	      		}
				
				
				if($this->data['ActionItem']['type_id'] == 6){  // 6 for Approval.
					$this->request->data['ActionItem']['description'] = 'Approval';	
					$this->request->data['Remark']['remarks'] = 'Approval';
					$this->request->data['ActionItem']['next_action_by'] = NULL;
					$this->request->data['ActionItem']['action_item_status'] = '6'; // for Approval of lookup_value_action_item_statuses
				}
				if($this->data['ActionItem']['type_id'] == 5){  // 5 for Re-Allocated of action_status.
				
					$this->request->data['Lead']['lead_managerprimary'] = $this->request->data['ActionItem']['primary_manager_id'];
					$this->request->data['ActionItem']['next_action_by'] = $this->request->data['ActionItem']['primary_manager_id'];
					$this->request->data['Lead']['lead_status'] = '3'; // for allocated of lead_statues
					$this->request->data['Lead']['lead_channel'] = $this->data['ActionItem']['allocated_channel_id'];
					$this->request->data['ActionItem']['description'] = 'Client re-allocated by '.strtoupper($this->User->Username($user_id)).' to '.strtoupper($this->User->Username($this->request->data['ActionItem']['primary_manager_id']));
					$this->request->data['ActionItem']['builder_id'] = NULL;
					$this->request->data['ActionItem']['project_id'] = NULL;	
					$this->request->data['Remark']['remarks'] = 'Client re-allocated by '.strtoupper($this->User->Username($user_id)).' to '.strtoupper($this->User->Username($this->request->data['ActionItem']['primary_manager_id']));
					$this->request->data['ActionItem']['action_item_status'] = '5'; // for Allocation of lookup_value_action_item_statuses

			   }
			   if($this->data['ActionItem']['type_id'] == 3){  // 3 for Activates.
					$this->request->data['ActionItem']['description'] = 'Client activated by '.strtoupper($this->User->Username($user_id));
					$this->request->data['Remark']['remarks'] = 'Client activated by '.strtoupper($this->User->Username($user_id));
					
					$this->request->data['ActionItem']['action_item_status'] = '3'; // for Activates of lookup_value_action_item_statuses 

					$this->request->data['ActionItem']['next_action_by'] = NULL;
					

					$this->request->data['Lead']['lead_fname'] = $this->data['ActionItem']['lead_fname'];
					$this->request->data['Lead']['lead_status'] = '4'; //Activate of lead_status.
					$this->request->data['Lead']['lead_primary_phone_country_code'] = $this->data['ActionItem']['lead_primary_phone_country_code'];
					$this->request->data['Lead']['lead_primaryphonenumber'] = $this->data['ActionItem']['lead_primaryphonenumber'];
					$this->request->data['Lead']['lead_emailid'] = $this->data['ActionItem']['lead_emailid'];
					$this->request->data['Lead']['lead_type'] = $this->data['ActionItem']['lead_type'];
					$this->request->data['Lead']['lead_budget_unit'] = $this->data['ActionItem']['lead_budget_unit'];
					$this->request->data['Lead']['lead_budget'] = $this->data['ActionItem']['lead_budget'];
					$this->request->data['Lead']['lead_progress'] = $this->data['ActionItem']['lead_progress'];
					$this->request->data['Lead']['lead_importance'] = $this->data['ActionItem']['lead_importance'];
					$this->request->data['Lead']['lead_lname'] = $this->data['ActionItem']['lead_lname'];
					$this->request->data['Lead']['lead_secondary_phone_country_code'] = $this->data['ActionItem']['lead_secondary_phone_country_code'];
					$this->request->data['Lead']['lead_secondaryphonenumber'] = $this->data['ActionItem']['lead_secondaryphonenumber'];
					$this->request->data['Lead']['lead_country'] = $this->data['ActionItem']['lead_country'];
					$this->request->data['Lead']['lead_segment'] = $this->data['ActionItem']['lead_segment'];
					$this->request->data['Lead']['lead_special_client_status'] = $this->data['ActionItem']['lead_special_client_status'];
					$this->request->data['Lead']['lead_closureprobabilityinnext1Month'] = $this->data['ActionItem']['lead_closureprobabilityinnext1Month'];
					$this->request->data['Lead']['lead_urgency'] = $this->data['ActionItem']['lead_urgency'];
					$this->request->data['Lead']['lead_suburb1'] = $this->data['ActionItem']['lead_suburb1'];
					$this->request->data['Lead']['lead_suburb2'] = $this->data['ActionItem']['lead_suburb2'];
					$this->request->data['Lead']['lead_suburb3'] = $this->data['ActionItem']['lead_suburb3'];
					$this->request->data['Lead']['lead_areapreference1'] = $this->data['ActionItem']['lead_areapreference1'];
					$this->request->data['Lead']['lead_areapreference2'] = $this->data['ActionItem']['lead_areapreference2'];
					$this->request->data['Lead']['lead_areapreference3'] = $this->data['ActionItem']['lead_areapreference3'];
					$this->request->data['Lead']['builder_id1'] = $this->data['ActionItem']['builder_id1'];
					$this->request->data['Lead']['builder_id2'] = $this->data['ActionItem']['builder_id2'];
					$this->request->data['Lead']['builder_id3'] = $this->data['ActionItem']['builder_id3'];
					$this->request->data['Lead']['proj_id1'] = $this->data['ActionItem']['proj_id1'];
					$this->request->data['Lead']['proj_id2'] = $this->data['ActionItem']['proj_id2'];
					$this->request->data['Lead']['proj_id3'] = $this->data['ActionItem']['proj_id3'];
					$this->request->data['Lead']['lead_unit_id_1'] = $this->data['ActionItem']['lead_unit_id_1'];
					$this->request->data['Lead']['lead_unit_id_2'] = $this->data['ActionItem']['lead_unit_id_2'];
					$this->request->data['Lead']['lead_unit_id_3'] = $this->data['ActionItem']['lead_unit_id_3'];
					$this->request->data['Lead']['lead_typeofprojectpreference1'] = $this->data['ActionItem']['lead_typeofprojectpreference1'];
					$this->request->data['Lead']['lead_typeofprojectpreference2'] = $this->data['ActionItem']['lead_typeofprojectpreference2'];
					$this->request->data['Lead']['lead_typeofprojectpreference3'] = $this->data['ActionItem']['lead_typeofprojectpreference3'];
					
					$date1 = date('Y-m-d',strtotime($this->data['Event']['date1']));
					if($this->data['Event']['date2'] == '')
						$date2 = $date1;
					else
						$date2 = date('Y-m-d',strtotime($this->data['Event']['date2']));	
					$this->request->data['Event']['start_date'] = $date1 . " " . date("H:i", strtotime($this->data['Event']['start_time']));
					$this->request->data['Event']['end_date'] = $date2 . " " . date("H:i", strtotime($this->data['Event']['end_time']));
					$this->request->data['Event']['creator_id'] = $id;
					$this->request->data['Event']['user_id'] = $id;
					$this->request->data['Event']['activity_closed'] = 'Yes'; 
					$this->request->data['Event']['activity_status'] = '1'; 
					$this->request->data['Event']['activity_level'] = '1'; // client
					$this->request->data['Event']['activity_type'] = '1'; // call
					$this->request->data['Event']['role_city'] = $channel_city_id; // call
					$this->request->data['Event']['activity_completed'] = '1'; 
					$this->request->data['Event']['event_type'] = '3'; // call event
					$this->request->data['Event']['activity_industry'] = '1'; // call event
					$this->request->data['Event']['dummy_status'] = $dummy_status;
					$this->request->data['Event']['lead_id'] = $actionitems['ActionItem']['lead_id'];
					$this->Event->save($this->data['Event']); // insert data to CallingReport table
	     		 }
				 if($this->data['ActionItem']['type_id'] == 10){
				 	$this->request->data['ActionItem']['action_item_status'] = '10'; // for Re-Approval of lookup_value_action_item_statuses
					$this->request->data['ActionItem']['next_action_by'] = $next_action_by;
					
					
				 }
				 /*
				  if($this->data['ActionItem']['type_id'] == 8){  // 8 for return.
		    
					$this->request->data['ActionItem']['description'] = 'Return';
					$this->request->data['Remark']['remarks'] = 'Return';
					$this->request->data['Lead']['lead_status'] = '5'; // 5 for Returned of lead status
					$this->request->data['ActionItem']['next_action_by'] = $actionitems['ActionItem']['created_by'];
					$this->request->data['ActionItem']['primary_manager_id'] = NULL;
					$this->request->data['Lead']['lead_managersecondary'] = NULL;
					$this->request->data['Lead']['lead_managerprimary'] = NULL;
					$this->request->data['ActionItem']['secondary_manager_id'] = NULL;
					$this->request->data['ActionItem']['action_item_status'] = '8'; // for lookup_value_action_item_statuses 
		      }  
			  */
				
				
				

     		
            //$channels = $this->Channel->find('all',array('conditions' => array('Channel.id' => $channel_id)));
           // $to = $channels[0]['User']['company_email_id'];
            //$to = 'neerajs@wtbglobal.com';

            $this->ActionItem->create();
            if ($this->ActionItem->save($this->data['ActionItem'])) {
            	$last_action_id = $this->ActionItem->getLastInsertId();
				$this->ActionItem->updateAll(array('ActionItem.action_item_active' => "'No'"),array('ActionItem.id' => $actio_itme_id));
				
				if($actionitems['ActionItem']['action_item_level_id']==1 || $actionitems['ActionItem']['action_item_level_id']==10){  // for client
				
					$this->Lead->id = $actionitems['ActionItem']['lead_id'];
					$this->Lead->save($this->data['Lead']);
    
				}
				
				 if($actionitems['ActionItem']['action_item_level_id']==2 && $this->data['ActionItem']['type_id']==6){  // for builder
                	$this->Builder->updateAll($this->data['Builder'],array('Builder.id' => $actionitems['ActionItem']['builder_id']));	
				}
					
				if($actionitems['ActionItem']['action_item_level_id']==3 && $this->data['ActionItem']['type_id']==6){  // for Project
                	$this->Project->updateAll($this->data['Project'],array('Project.id' => $actionitems['ActionItem']['project_id']));
                }
				if($actionitems['ActionItem']['action_item_level_id']==5 && $this->data['ActionItem']['type_id']==6){  // for Builder Contact
                	$this->BuilderContact->updateAll($this->data['BuilderContact'],array('BuilderContact.id' => $actionitems['ActionItem']['builder_contact_id']));
                }
				if($actionitems['ActionItem']['action_item_level_id']==7 && $this->data['ActionItem']['type_id']==6){  // for Project Contact
                	$this->ProjectContact->updateAll($this->data['ProjectContact'],array('ProjectContact.id' => $actionitems['ActionItem']['project_contact_id']));
                }
				if($actionitems['ActionItem']['action_item_level_id']==11 && $this->data['ActionItem']['type_id']==6){  // for Project Unit
                	$this->ProjectUnit->updateAll($this->data['ProjectUnit'],array('ProjectUnit.id' => $actionitems['ActionItem']['project_unit_id']));
                }
				
				//$log = $this->ActionItem->getDataSource()->getLog(false, false);       
        		//debug($log);
               // die;
                 $this->Remark->save($this->data['Remark']);
                
                
                 //$this->Session->write('success_msg', 'Action Item has been saved.');
                /* Email Logic */ 
				if(($this->data['ActionItem']['type_id'] == 4 || $this->data['ActionItem']['type_id'] == 3 || $this->data['ActionItem']['type_id'] == 5 || $this->data['ActionItem']['type_id'] == 8 || $this->data['ActionItem']['type_id'] == 9 || $this->data['ActionItem']['type_id'] == 10) && $last_action_id > 0 && ($actionitems['ActionItem']['action_item_level_id'] == '1' || $actionitems['ActionItem']['action_item_level_id'] == '10')){ 
					$actionArry= $this->ActionItem->findById($last_action_id);
					//if($actionArry['Lead']['lead_source'] != 3){ // if source is not old client
					$email_client_name = '';
							if($actionArry['Lead']['lead_source'] == 3)
								$client_info = 'OLD';
							else
								$client_info = 'NEW';
							
							
							$Email = new CakeEmail();
							
							$Email->viewVars(array(
							    'Source' => strtoupper($actionArry['Source']['value']),
								'CreatedBy' => strtoupper($actionArry['CreatedBy']['fname'].' '.$actionArry['CreatedBy']['lname']),
								'NextActionBy' => strtoupper($actionArry['NextActionBy']['fname'].' '.$actionArry['NextActionBy']['lname']),
								'PhoneOfficer' => strtoupper($actionArry['PhoneOfficer']['fname'].' '.$actionArry['PhoneOfficer']['lname']),
								'Associate' =>  strtoupper($actionArry['Associate']['fname'].' '.$actionArry['Associate']['lname']),
								'City' => strtoupper(substr($actionArry['City']['city_name'],0,3)),
								'Urgency' => strtoupper(substr($actionArry['Urgency']['value'],0,3)),
								'Importance' => strtoupper(substr($actionArry['Importance']['value'],0,3)),
								'Country' => strtoupper(substr($actionArry['Country']['value'],0,2)),
								'lead_primaryphonenumber' => $actionArry['PrimaryCode']['code'].'- '.$actionArry['Lead']['lead_primaryphonenumber'],
								'lead_name' => strtoupper($actionArry['Lead']['lead_fname']).' '.strtoupper($actionArry['Lead']['lead_lname']),
								'lead_emailid' => $actionArry['Lead']['lead_emailid'],
								'Area' => strtoupper($actionArry['Area']['area_name']),
								'Unit' => strtoupper($actionArry['Unit']['value']),
								'Suburb' => strtoupper($actionArry['Suburb']['suburb_name']),
								'Builder' => strtoupper($actionArry['Builder']['builder_name']),
								'Project' => strtoupper($actionArry['Project']['project_name']),
								'TypeProject' => strtoupper($actionArry['TypeProject']['value']),
								'Type' => strtoupper($actionArry['Type']['value']),
								'Budget' => $actionArry['BudgetUnit']['value'].' '.$actionArry['Lead']['lead_budget'],
								'Arrival' => date("j M, Y H:i:s", strtotime($actionArry['Lead']['created'])),
								'AllocationHistory' => date("j M, Y H:i:s", strtotime($actionitems['ActionItem']['created'])),
								'ReturnHistory' => date("j M, Y H:i:s", strtotime($actionArry['ActionItem']['created'])),
								'LastAllocation' => date("j M, Y H:i:s", strtotime($actionArry['ActionItem']['created'])),
								//'LastAllocation' => date("j M, Y H:i:s", strtotime($this->ActionItem->GetLastAllocationDate($actionArry['ActionItem']['lead_id']))),
								'LookupReturn' => strtoupper($actionArry['LookupReturn']['value']),
								'LookupReject' => strtoupper($actionArry['LookupReject']['value']),
								'Return' => strtoupper($actionArry['ActionItem']['other_return']),
								'Reject' => strtoupper($actionArry['ActionItem']['other_rejection']),
								'Description' => strtoupper($actionArry['Lead']['lead_description']),
								
							));
							
							if($this->data['ActionItem']['type_id'] == 4){	
								$to = 'infra@sumanus.com';
								$email_client_name = strtoupper($actionArry['NextActionBy']['fname'].' '.$actionArry['NextActionBy']['mname'].' '.$actionArry['NextActionBy']['lname']);
								$Email->template('lead_template', 'default')->emailFormat('html')->to($to)->from('admin@silkrouters.com')->subject('Silkrouters - '.$client_info.' Client '.$actionArry['ActionType']['type'].'-'.$email_client_name)->send();
								}
						   if($this->data['ActionItem']['type_id'] == 5){	// RE-ALLOCATION
								$to = 'infra@sumanus.com';
								$email_client_name = strtoupper($actionArry['NextActionBy']['fname'].' '.$actionArry['NextActionBy']['mname'].' '.$actionArry['NextActionBy']['lname']);
								$Email->template('ActionItems/re_allocation', 'default')->emailFormat('html')->to($to)->from('admin@silkrouters.com')->subject('Silkrouters - '.$client_info.' CLIENT RE-ALLOCATION '.$actionArry['ActionType']['type'].'-'.$email_client_name)->send();
								}	
							if($this->data['ActionItem']['type_id'] == 3)	{
								$to = 'infra@sumanus.com';
								$email_client_name =  $actionArry['CreatedBy']['fname'].' '.$actionArry['CreatedBy']['lname'];		
								$Email->template('lead_template', 'default')->emailFormat('html')->to($to)->from('admin@silkrouters.com')->subject('Silkrouters - '.$client_info.' Client '.$actionArry['ActionType']['type'].'-'.$email_client_name)->send();
							}
							if($this->data['ActionItem']['type_id'] == 10){	 // Re-submission
								$to = array('administrator@silkrouters.com','data@silkrouters.com'); 
								//$to = 'biswajit@wtbglobal.com';
								$cc = 'infra@sumanus.com';
								$NextActionBy = $actionArry['NextActionBy']['fname'].' '.$actionArry['NextActionBy']['lname'];
								$Email->template('lead_template', 'default')->emailFormat('html')->to($to)->cc($cc)->from('admin@silkrouters.com')->subject('Silkrouters - '.$client_info.' Client '.$actionArry['ActionType']['type'].'-'.$NextActionBy)->send();
								}
								
							if($this->data['ActionItem']['type_id'] == 8){	// return
								if($role_id == '4'){
								
									$to = $this->User->GetRealEasteEmail($this->getParentNode($actionArry['ActionItem']['lead_id']));
									//$to = 'biswajit@wtbglobal.com';
									$cc = array('infra@sumanus.com','data@silkrouters.com','administrator@silkrouters.com');
									$email_client_name = $actionArry['CreatedBy']['fname'].' '.$actionArry['CreatedBy']['lname'];
									$lead_name = strtoupper($actionArry['Lead']['lead_fname'].' '.$actionArry['Lead']['lead_lname']);
									$Email->template('return_client_desk', 'default')->emailFormat('html')->to($to)->cc($cc)->from('admin@silkrouters.com')->subject('Silkrouters - '.$client_info.' CLIENT RETURN '.$lead_name.' BY '.$email_client_name)->send();
									
								}
								else{
									$to = array('administrator@silkrouters.com','data@silkrouters.com'); 
									//$to = 'biswajit@wtbglobal.com';
									$cc = 'infra@sumanus.com';
									$email_client_name = $actionArry['CreatedBy']['fname'].' '.$actionArry['CreatedBy']['lname'];
									$lead_name = strtoupper($actionArry['Lead']['lead_fname'].' '.$actionArry['Lead']['lead_lname']);
									$Email->template('return_transaction', 'default')->emailFormat('html')->to($to)->cc($cc)->from('admin@silkrouters.com')->subject('Silkrouters - '.$client_info.' CLIENT RETURN '.$lead_name.' BY '.$email_client_name)->send();
								}
							}
							if($this->data['ActionItem']['type_id'] == 9 && $role_id == '4'){ // rejection
								
								 $to_mail = $this->User->GetRealEasteEmail($this->getParentNode($actionArry['ActionItem']['lead_id']));
								//die;
								//$to = 'biswajit@wtbglobal.com';
								$to = array('administrator@silkrouters.com','data@silkrouters.com'); 
								if($to_mail == '')
									$cc = array('infra@sumanus.com');
								else
									$cc = array('infra@sumanus.com',$to_mail);	
								$email_client_name = $actionArry['CreatedBy']['fname'].' '.$actionArry['CreatedBy']['lname'];
								$lead_name = strtoupper($actionArry['Lead']['lead_fname'].' '.$actionArry['Lead']['lead_lname']);
								$Email->template('rejection_client_desk', 'default')->emailFormat('html')->to($to)->cc($cc)->from('admin@silkrouters.com')->subject('Silkrouters - '.$client_info.' CLIENT REJECTION '.$lead_name.' BY '.$email_client_name)->send();
							}
							
							
						//}
				}
                 /* End Emial */
                 /* Phone API */
				 /*
				$msg = $actionitems['City']['city_name'].' | '.$actionitems['Urgency']['value'].' | '.$actionitems['Importance']['value'].' | '.$actionitems['Country']['value'].' | '.$actionitems['Lead']['lead_primaryphonenumber'].' | '.$actionitems['Lead']['lead_emailid'].' | '.$actionitems['Area']['area_name'].' , '.$actionitems['Suburb']['suburb_name'].' , '.$actionitems['Builder']['builder_name'].' , '.$actionitems['Project']['project_name'].' , '.$actionitems['TypeProject']['value'];
				$authKey = Configure::read('sms_api_key');
				$senderId = Configure::read('sms_sender_id');
				$mobileNumber = $channels[0]['User']['primary_mobile_number'];
				//$mobileNumber = "9833156460";
				$message = urlencode($msg);
				$route = "default";		
				$this->Sms->send_sms($authKey,$mobileNumber,$message,$senderId,$route);
                */
                /* End Phone */
				
                 echo '<script>
				 			var objP=parent.document.getElementsByClassName("mfp-bg");
							var objC=parent.document.getElementsByClassName("mfp-wrap");
							objP[0].style.display="none";
							objC[0].style.display="none";
							parent.location.reload(true);</script>';
            } else {
                $this->Session->setFlash('Unable to add Action item.', 'failure');
            }
        }
              
        
        
		
		$conditions = array('city_id = "'.$city_id.'" AND (channel_role = 1 OR channel_role = 3)'); // 1 for Execution 3 for Consulting of lookup_value_channel_roles
        
        $channels = $this->Channel->find('list',array('fields' => array('id','channel_name'),
                                                      'conditions' => $conditions												  
											
													 ));
        $this->set(compact('channels'));
		
		$reject_cond = array('type' => array($actionitems['ActionItem']['action_item_level_id'],'0'));
		$rejections = $this->LookupValueActionItemRejection->find('list', array('fields' => 'id, value','conditions' => $reject_cond, 'order' => 'value ASC'));
		$this->set(compact('rejections'));
		
		$general_exu = $this->Channel->find('first', array('conditions' => array('Channel.city_id' => $channel_city_id , 'Channel.channel_role' => '16', 'Channel.dummy_status' => $dummy_status)));
		
		if(!empty($general_exu))
				$general_exu_id = $general_exu['Channel']['id'];
			
	
		
		$secondary_manager = $this->User->find('all',array('fields' => array('User.id','User.fname','User.mname','User.lname'),
                                                         'conditions' =>  array(
														 		 'OR' =>
																		array(
																			   'AND' => array(
																							 'User.exu_channel_id' => $channel_id,
																							  'User.exu_role_id' => '8', // Execution Associate of roles
																							  'User.dummy_status' => $dummy_status
																							

																						),
																				'OR' =>  array(
																						'AND' => array(
																							 'User.general_exe_channel_id' => $general_exu_id,
																							  'User.general_exe_role_id' => '9', // General Execution Associate of roles
																							   'User.dummy_status' => $dummy_status
																						  )
																					),
																						
																			 
																			 ),
																			 
																	)
														 
														 	
														 
												
														 
														 ));
						 
		// $log = $this->User->getDataSource()->getLog(false, false);       
        // debug($log);
		$secondary_manager = Set::combine($secondary_manager, '{n}.User.id',array('%s %s %s','{n}.User.fname','{n}.User.mname','{n}.User.lname'));
		$this->set(compact('secondary_manager'));
		
		$retrun_cond = array('type' => array($actionitems['ActionItem']['action_item_level_id'],'0'));
		$returns = $this->LookupValueActionItemReturn->find('list', array('fields' => 'id, value','conditions' => $retrun_cond, 'order' => 'value ASC'));
		$this->set(compact('returns'));
		
		$call_quality = $this->LookupValueCallQuality->find('list', array('fields' => 'id, value','order' => 'value ASC'));
		$this->set(compact('call_quality'));
		
		$codes = $this->LookupValueLeadsCountry->find('all',array('fields' => array('LookupValueLeadsCountry.id','LookupValueLeadsCountry.value','LookupValueLeadsCountry.code')));
		$codes = Set::combine($codes, '{n}.LookupValueLeadsCountry.id',array('%s: %s','{n}.LookupValueLeadsCountry.value','{n}.LookupValueLeadsCountry.code'));		
		$this->set(compact('codes'));
		
		$closureprobabilities = $this->LookupValueLeadsClosureProbability->find('list', array('fields' => 'id,value', 'order' => 'value ASC'));
		$this->set(compact('closureprobabilities'));
		
		$urgencies = $this->LookupValueLeadsUrgency->find('list', array('fields' => 'id,value', 'order' => 'value ASC'));
		$this->set(compact('urgencies'));
		
		$segment = $this->LookupValueLeadsSegment->find('list', array('fields' => 'id,value', 'order' => 'value ASC'));
		$this->set(compact('segment'));
		
		$countires = $this->LookupValueLeadsCountry->find('list', array('fields' => 'id,value', 'order' => 'value ASC'));
		$this->set(compact('countires'));
		
		$importance = $this->LookupValueLeadsImportance->find('list', array('fields' => 'id,value', 'order' => 'value ASC'));
		$this->set(compact('importance'));
		
		$types = $this->LookupValueLeadsType->find('list', array('fields' => 'id,value', 'order' => 'value ASC'));
		$this->set(compact('types'));
		
		$lead_progrss = $this->LookupValueLeadsProgress->find('list', array('fields' => 'id,value', 'order' => 'value ASC'));
		$this->set(compact('lead_progrss'));
		
		$courrency = $this->LookupValueLeadsCurrency->find('list', array('fields' => 'id, value', 'order' => 'value ASC'));
		$this->set(compact('courrency'));
		
		$suburbs = $this->Suburb->find('list', array('fields' => 'Suburb.id, Suburb.suburb_name','conditions' => array('Suburb.dummy_status' =>$dummy_status,'Suburb.city_id' => $channel_city_id), 'order' => 'Suburb.suburb_name ASC'));
		$this->set(compact('suburbs'));

		$areas = $this->Area->find('list', array('fields' => 'Area.id, Area.area_name','conditions' => array('Area.dummy_status' => $dummy_status,'Area.city_id' => $channel_city_id), 'order' => 'Area.area_name ASC'));
		$this->set('areas', $areas);
		
		$project = $this->Project->find('list', array('fields' => 'Project.id, Project.project_name','conditions' => array('Project.dummy_status' => $dummy_status,'Project.city_id' => $channel_city_id), 'order' => 'Project.project_name ASC'));
		$this->set('projects', $project);			
			
		$builder = $this->Builder->find('list', array('fields' => 'Builder.id, Builder.builder_name','conditions' => array('OR' =>array(
																'Builder.builder_primarycity' => $channel_city_id,
																'Builder.builder_secondarycity' => $channel_city_id,
																'Builder.builder_tertiarycity' => $channel_city_id,
																'Builder.city_4' => $channel_city_id,
																'Builder.city_5' => $channel_city_id,
																),'Builder.dummy_status' => $dummy_status), 'order' => 'Builder.builder_name ASC'));
		$this->set('builders', $builder);
		
		$unit = $this->LookupValueProjectUnitPreference->find('list', array('fields' => 'id, value', 'order' => 'value ASC'));
		$this->set('unit', $unit);
		
		$type_preference = $this->LookupValueProjectPhase->find('list', array('fields' => 'id, value', 'order' => 'value ASC'));
		$this->set(compact('type_preference'));
		
		$details_cond = array('type_id' => array($actionitems['ActionItem']['action_item_level_id'],'0'));
		$activity_details = $this->LookupValueActivityDetail->find('list', array('fields' => 'id, value','conditions' => $details_cond, 'order' => 'value ASC'));
		$this->set(compact('activity_details'));
 
    }
	
	public function even_action($actio_itme_id = null){
	
		$this->layout = 'ajax';
		$dummy_status = $this->Auth->user('dummy_status');		 
		$user_id = $this->Auth->user('id');
		$role_id = $this->Session->read("role_id");
		$channel_id = $this->Session->read("channel_id");
		$channels = $this->Channel->findById($channel_id);
		$city_id = $channels['Channel']['city_id'];
		
			
		
		$actionitems = $this->ActionItem->findById($actio_itme_id);
		$Reimbursements = $this->Reimbursement->findById($actionitems['ActionItem']['event_id']);
		
		if($Reimbursements['Reimbursement']['reimbursement_city_id'] == '2')
			$submitted_to = '150';
		else
			$submitted_to = '149';
		
		$this->set(compact('Reimbursements'));
		 if ($this->request->is('post')) {
		
			/**************This data is common features *****************************************/
		
				$this->request->data['ActionItem']['parent_action_item_id'] = $actio_itme_id;
				$this->request->data['ActionItem']['dummy_status'] = $dummy_status;
				$this->request->data['ActionItem']['action_item_created'] = date('Y-m-d');
				$this->request->data['ActionItem']['created_by_id'] = $user_id;
				$this->request->data['ActionItem']['action_item_active'] = 'Yes';
				$this->request->data['ActionItem']['created_by'] = $user_id;
				//$this->request->data['ActionItem']['action_item_level_id'] = $user_id;
				$this->request->data['Remark']['remarks_time'] = date('g:i A');
				$this->request->data['Remark']['remarks_by'] = $user_id;
				$this->request->data['Remark']['created_by'] = $user_id;
				$this->request->data['Remark']['remarks_date'] = date('Y-m-d');
				$this->request->data['Remark']['dummy_status'] = $dummy_status;
				$this->request->data['ActionItem']['action_item_source'] =  $role_id;
				$this->request->data['ActionItem']['event_id'] =  $actionitems['ActionItem']['event_id'];	
				
					
				
				
				if($this->data['ActionItem']['type_id'] == 6){  // 6 for Approval of event.
					$this->request->data['ActionItem']['description'] = 'Submit Approval';	
					$this->request->data['Remark']['remarks'] = 'Submit Approval';
					$this->request->data['ActionItem']['next_action_by'] = $submitted_to;
					$this->request->data['ActionItem']['action_item_status'] = '6'; // for Approval of lookup_value_action_item_statuses
					
				//	$this->request->data['Remark']['remarks_level'] = '6'; //2 for event from lookup_value_remarks_level
					$this->request->data['Remark']['activity_id'] = $actionitems['ActionItem']['event_id'];	
					$this->request->data['Event']['activity_status'] = '1'; // for approved
					$this->request->data['ActionItem']['action_item_level_id'] = '9'; // for event
					$this->request->data['Reimbursement']['reimbursement_status'] = '2'; // for approved of lookup_value_reimbursement_status
					$this->request->data['Reimbursement']['reimbursement_approved_by_id'] = $user_id; // for approved
					$this->request->data['Reimbursement']['reimbursement_approved_date'] = date('Y-m-d'); // for approved
				}
				
				 if($this->data['ActionItem']['type_id'] == 8){  // 8 for return.
		    
					$this->request->data['ActionItem']['description'] = 'Return';
					$this->request->data['Remark']['remarks'] = 'Return';
		
					$this->request->data['ActionItem']['next_action_by'] = $actionitems['ActionItem']['created_by'];
					$this->request->data['ActionItem']['action_item_level_id'] = '9'; // for event
					$this->request->data['ActionItem']['action_item_status'] = '8'; // for lookup_value_action_item_statuses 
		      } 
			  
			  if($this->data['ActionItem']['type_id'] == 9){ // for rejection
				
    				$this->request->data['ActionItem']['description'] = 'Rejection';
					$this->request->data['Remark']['remarks'] = 'Rejection';
					
					$this->request->data['ActionItem']['next_action_by'] = NULL;
					$this->request->data['ActionItem']['action_item_level_id'] = '9'; // for event
					$this->request->data['ActionItem']['action_item_status'] = '9'; // for rejection of lookup_value_action_item_statuses
				} 
				
				$this->ActionItem->create();
            	if ($this->ActionItem->save($this->data['ActionItem'])) {
					$last_action_id = $this->ActionItem->getLastInsertId();
					$this->ActionItem->updateAll(array('ActionItem.action_item_active' => "'No'"),array('ActionItem.id' => $actio_itme_id));
					
					if($actionitems['ActionItem']['action_item_level_id']==9 && $this->data['ActionItem']['type_id']==6){  // for Reimbursement
						$this->Reimbursement->id = $actionitems['ActionItem']['event_id'];
						$this->Reimbursement->save($this->request->data['Reimbursement']);
                	//$this->Reimbursement->updateAll($this->data['Reimbursement'],array('Reimbursement.id' => $actionitems['ActionItem']['event_id']));
                }
					
					
					
					
					$actionArry= $this->ActionItem->findById($last_action_id);
					$CreatedBy = strtoupper($actionArry['CreatedBy']['fname'].' '.$actionArry['CreatedBy']['lname']);
					$ActivityLevel = strtoupper($Reimbursements['Level']['value']);
					$Email = new CakeEmail();
							
							$Email->viewVars(array(
							    'SubmittedBy' =>$Reimbursements['SubmittedBy']['fname'].' '.$Reimbursements['SubmittedBy']['mname'].' '.$Reimbursements['SubmittedBy']['lname'],
								'CreatedBy' => $actionArry['CreatedBy']['fname'].' '.$actionArry['CreatedBy']['lname'],
								'NextActionBy' => $actionArry['NextActionBy']['fname'].' '.$actionArry['NextActionBy']['lname'],
								'LookupReturn' => strtoupper($actionArry['LookupReturn']['value']),
								'LookupReject' => strtoupper($actionArry['LookupReject']['value']),
								'Return' => strtoupper($actionArry['ActionItem']['other_return']),
								'Reject' => strtoupper($actionArry['ActionItem']['other_rejection']),
								'ApprovalAmount' => $Reimbursements['Reimbursement']['reimbursement_amount'],
								'SumittedDate' => date("j M, Y", strtotime($Reimbursements['Reimbursement']['reimbursement_bill_submission_date'])),
								'ActivityLevel' => $Reimbursements['Level']['value'],
								'ActivityWith' => $Reimbursements['Reimbursement']['reimbursement_with'],
								'ExpenceType' => $Reimbursements['Type']['value'],
								'ExpenceFor' => $Reimbursements['For']['value'],
							));
							
							if($this->data['ActionItem']['type_id'] == 6){	
								$to = 'infra@sumanus.com';
								//$to = 'biswajit@wtbglobal.com';
								$Email->template('reimbursement', 'default')->emailFormat('html')->to($to)->from('admin@silkrouters.com')->subject('Silkrouters - '.$ActivityLevel.' REIMBURSEMENT APPROVE BY - '.$CreatedBy)->send();
								}
							
							if($this->data['ActionItem']['type_id'] == 8){	// return
								
									$to = array('administrator@silkrouters.com'); 
									$cc = 'infra@sumanus.com';
									
									$Email->template('reimbursement', 'default')->emailFormat('html')->to($to)->cc($cc)->from('admin@silkrouters.com')->subject('Silkrouters - '.$ActivityLevel.' REIMBURSEMENT RETURN  BY '.$CreatedBy)->send();
								
							}
							if($this->data['ActionItem']['type_id'] == 9){ // rejection
								
								//$to_mail = $this->User->GetRealEasteEmail($this->getParentNode($actionArry['ActionItem']['lead_id']));
								$to = array('administrator@silkrouters.com'); 
								$cc = array('infra@sumanus.com');
								
								$Email->template('reimbursement', 'default')->emailFormat('html')->to($to)->cc($cc)->from('admin@silkrouters.com')->subject('Silkrouters - '.$ActivityLevel.' REIMBURSEMENT REJECTION BY '.$CreatedBy)->send();
							}	
				
				 echo '<script>
				 			var objP=parent.document.getElementsByClassName("mfp-bg");
							var objC=parent.document.getElementsByClassName("mfp-wrap");
							objP[0].style.display="none";
							objC[0].style.display="none";
							parent.location.reload(true);</script>';
            } else {
                $this->Session->setFlash('Unable to add Action item.', 'failure');
            }
				
		}
		
		$type = $this->ActionItemType->find('list',array('fields' => array('id','type'),'conditions' =>'ActionItemType.id = 6 OR ActionItemType.id = 8 OR ActionItemType.id = 9'));
		$this->set(compact('type'));
		
		$reject_cond = array('type' => array($actionitems['ActionItem']['action_item_level_id'],'0'));
		$rejections = $this->LookupValueActionItemRejection->find('list', array('fields' => 'id, value','conditions' => $reject_cond, 'order' => 'value ASC'));
		$this->set(compact('rejections'));
		
		$retrun_cond = array('type' => array($actionitems['ActionItem']['action_item_level_id'],'0'));
		$returns = $this->LookupValueActionItemReturn->find('list', array('fields' => 'id, value','conditions' => $retrun_cond, 'order' => 'value ASC'));
		$this->set(compact('returns'));
	}
    
    function edit($id = null) {
        
        $city_id = $this->Auth->user("city_id");
        if (!$id) {
            throw new NotFoundException(__('Invalid Builder'));
        }

        $action_item = $this->ActionItem->findById($id);

        if (!$action_item) {
            throw new NotFoundException(__('Invalid builder'));
        }

        if ($this->request->data) {


            $this->ActionItem->id = $id;
            $action_item_created= explode('/',$this->data['ActionItem']['action_item_created']);
            $date = $action_item_created[0];
            $month = $action_item_created[1];
            $year = $action_item_created[2];
            $this->request->data['ActionItem']['action_item_created'] = $year.'-'.$month.'-'.$date;
            
            if ($this->ActionItem->save($this->request->data)) {
                $this->Session->setFlash('Action Item has been updated.', 'success');
                $this->redirect(array('action' => 'index'));
            } else {
                $this->Session->setFlash('Unable to update Action Item.', 'failure');
            }
        }
        
        $type = $this->ActionItemType->find('list',array('fields' => array('id','type')));
        $this->set(compact('type'));
        
        $channels = $this->Channel->find('list',array('fields' => array('id','channel_name'),
                                                      'conditions' => array('city_id ='.$city_id)));
        $this->set(compact('channels'));
        
        $leads = $this->Lead->find('all',array('fields' => array('Lead.id','Lead.lead_fname','Lead.lead_lname')));
        $leads = Set::combine($leads, '{n}.Lead.id',array('%s %s','{n}.Lead.lead_fname','{n}.Lead.lead_lname'));

        $this->set(compact('leads'));
        
        $levels = $this->ActionItemLevel->find('list',array('fields' => array('id','level')));
        $this->set(compact('levels'));

        $this->request->data = $action_item;
    }
	
	public function getParentNode($lead_id = null){
        $parent = $this->ActionItem->find('first', array('conditions' => array('ActionItem.lead_id' => $lead_id),
                                   'fields'=>'ActionItem.created_by_id'));
		return 	$parent['ActionItem']['created_by_id'];					   
    }
	
	public function edit_reimbursement($reimbursement_id = null){
	
		$this->layout = 'ajax';
		$dummy_status = $this->Auth->user('dummy_status');		 
		$user_id = $this->Auth->user('id');
		$role_id = $this->Session->read("role_id");
		
		$Reimbursements = $this->Reimbursement->findById($reimbursement_id);
		
		$reimburse_type = $this->LookupValueReimbursementType_1->find('list',array('fields' => 'id,value','order' => 'id ASC'));
        $this->set(compact('reimburse_type'));
		
		$activity_levels = $this->LookupValueActivityLevel->find('list',array('fields' => 'id,value','order' => 'id ASC'));
        $this->set('activity_levels', $activity_levels);
		
		$bill_type = $this->LookupValueBillStatus->find('list',array('fields' => 'id,value','order' => 'id ASC'));
        $this->set(compact('bill_type'));
		
		$bill_status = $this->LookupValueBillType->find('list',array('fields' => 'id,value','order' => 'id ASC'));
        $this->set(compact('bill_status'));
		
		$reimburse_for = $this->LookupValueReimbursementType_2->find('list',array('fields' => 'id,value','conditions' => array('type_id' => $Reimbursements['Reimbursement']['reimbursement_type_1']),'order' => 'id ASC'));
        $this->set(compact('reimburse_for'));
		
		if (!$this->request->data) {
       		 $this->request->data = $Reimbursements;
        }
		
	} 
	

}
?>