<?php

App::uses('AppController', 'Controller');
App::uses('CakeEmail', 'Network/Email');

class UsersController extends AppController {

    var $name = 'Users';
    var $uses = array('User', 'Role', 'Event', 'City', 'Channel', 'GroupsUser', 'LookupValueLeadsCountry', 'Builder', 'Project', 'Lead', 'ActionItem', 'LookupValueActivityIndustry');
    public $components = array(
        'Auth' => array(
            'authenticate' => array(
                'Form' => array(
                    'fields' => array('username' => 'company_email_id')
                )
            )
        )
    );

    function dashboard() {

        $role_id = '';
        $dummy_status = $this->Auth->user('dummy_status');
        $user_id = $this->Auth->user('id');
        //$channel_id = $this->Session->read("channel_id");


        if (isset($this->params['named']['id'])) {
            $role_id = $this->params['named']['id'];
            $channel_id = $this->params['named']['channel'];
            $industry = $this->params['named']['industry'];
             $this->set(compact('industry'));
            if (!$this->Session->read('role_id'))
                $this->Session->write('role_id', $role_id);
                
            $this->Session->write('channel_id', $channel_id);
            $this->Session->write('industry', $industry);
        }
        else {
            $channel_id = $this->Session->read("channel_id");
            $role_id = $this->Session->read('role_id');
            $industry = $this->Session->read('industry');
        }
        $channels = $this->Channel->findById($channel_id);
        $channel_city_id = $channels['Channel']['city_id'];
        // $role_id = $this->Session->read('role_id');
        if ($role_id == '') {
            $role_id = $this->Auth->user("role_id");
        }

        if ($role_id == '15') {
            if ($channel_city_id == '2') {
                $builder_all_count = $this->Builder->find('count', array('conditions' => array('OR' => array(
                            'Builder.builder_primarycity' => $channel_city_id,
                            'Builder.builder_secondarycity' => $channel_city_id,
                            'Builder.builder_tertiarycity' => $channel_city_id,
                            'Builder.city_4' => $channel_city_id,
                            'Builder.city_5' => $channel_city_id,
                        ),
                        'Builder.dummy_status' => $dummy_status)
                ));
                $builder_approve = $this->Builder->find('count', array('conditions' => array('OR' => array(
                            'Builder.builder_primarycity' => $channel_city_id,
                            'Builder.builder_secondarycity' => $channel_city_id,
                            'Builder.builder_tertiarycity' => $channel_city_id,
                            'Builder.city_4' => $channel_city_id,
                            'Builder.city_5' => $channel_city_id,
                        ), 'Builder.builder_approved' => '1', 'Builder.dummy_status' => $dummy_status)
                ));
                $builder_pending = $this->Builder->find('count', array('conditions' => array('OR' => array(
                            'Builder.builder_primarycity' => $channel_city_id,
                            'Builder.builder_secondarycity' => $channel_city_id,
                            'Builder.builder_tertiarycity' => $channel_city_id,
                            'Builder.city_4' => $channel_city_id,
                            'Builder.city_5' => $channel_city_id,
                        ), 'Builder.builder_approved' => '2', 'Builder.dummy_status' => $dummy_status)));

                $project_all_count = $this->Project->find('count', array('conditions' => array('Project.dummy_status' => $dummy_status, 'Project.city_id' => $channel_city_id)));

                $project_approve = $this->Project->find('count', array('conditions' => array('Project.city_id' => $channel_city_id, 'Project.proj_approved' => '1', 'Project.dummy_status' => $dummy_status)));

                $project_pending = $this->Project->find('count', array('conditions' => array('Project.city_id' => $channel_city_id, 'Project.proj_approved' => '2', 'Project.dummy_status' => $dummy_status)));
            } else {
                $builder_all_count = $this->Builder->find('count', array('conditions' => array('NOT' => array(
                            'Builder.builder_primarycity' => 2,
                            'Builder.builder_secondarycity' => 2,
                            'Builder.builder_tertiarycity' => 2,
                            'Builder.city_4' => 2,
                            'Builder.city_5' => 2,
                        ),
                        'Builder.dummy_status' => $dummy_status)
                ));
                $builder_approve = $this->Builder->find('count', array('conditions' => array('NOT' => array(
                            'Builder.builder_primarycity' => 2,
                            'Builder.builder_secondarycity' => 2,
                            'Builder.builder_tertiarycity' => 2,
                            'Builder.city_4' => 2,
                            'Builder.city_5' => 2,
                        ), 'Builder.builder_approved' => '1', 'Builder.dummy_status' => $dummy_status)
                ));
                $builder_pending = $this->Builder->find('count', array('conditions' => array('NOT' => array(
                            'Builder.builder_primarycity' => 2,
                            'Builder.builder_secondarycity' => 2,
                            'Builder.builder_tertiarycity' => 2,
                            'Builder.city_4' => 2,
                            'Builder.city_5' => 2,
                        ), 'Builder.builder_approved' => '2', 'Builder.dummy_status' => $dummy_status)));

                $project_all_count = $this->Project->find('count', array('conditions' => array('NOT' => array('Project.city_id' => 2), 'Project.dummy_status' => $dummy_status)));

                $project_approve = $this->Project->find('count', array('conditions' => array('NOT' => array('Project.city_id' => 2), 'Project.proj_approved' => '1', 'Project.dummy_status' => $dummy_status)));

                $project_pending = $this->Project->find('count', array('conditions' => array('NOT' => array('Project.city_id' => 2), 'Project.proj_approved' => '2', 'Project.dummy_status' => $dummy_status)));
            }
        } else if ($channel_city_id == '1') {
            $builder_all_count = $this->Builder->find('count', array('conditions' => array('Builder.dummy_status' => $dummy_status)));
            $builder_approve = $this->Builder->find('count', array('conditions' => array('Builder.builder_approved' => '1', 'Builder.dummy_status' => $dummy_status)));
            $builder_pending = $this->Builder->find('count', array('conditions' => array('Builder.builder_approved' => '2', 'Builder.dummy_status' => $dummy_status)));
            $project_all_count = $this->Project->find('count', array('conditions' => array('Project.dummy_status' => $dummy_status)));
            $project_approve = $this->Project->find('count', array('conditions' => array('Project.proj_approved' => '1', 'Project.dummy_status' => $dummy_status)));
            $project_pending = $this->Project->find('count', array('conditions' => array('Project.proj_approved' => '2', 'Project.dummy_status' => $dummy_status)));
        } else {
            $builder_all_count = $this->Builder->find('count', array('conditions' => array('OR' => array(
                        'Builder.builder_primarycity' => $channel_city_id,
                        'Builder.builder_secondarycity' => $channel_city_id,
                        'Builder.builder_tertiarycity' => $channel_city_id,
                        'Builder.city_4' => $channel_city_id,
                        'Builder.city_5' => $channel_city_id,
                    ),
                    'Builder.dummy_status' => $dummy_status)
            ));
            $builder_approve = $this->Builder->find('count', array('conditions' => array('OR' => array(
                        'Builder.builder_primarycity' => $channel_city_id,
                        'Builder.builder_secondarycity' => $channel_city_id,
                        'Builder.builder_tertiarycity' => $channel_city_id,
                        'Builder.city_4' => $channel_city_id,
                        'Builder.city_5' => $channel_city_id,
                    ), 'Builder.builder_approved' => '1', 'Builder.dummy_status' => $dummy_status)
            ));
            $builder_pending = $this->Builder->find('count', array('conditions' => array('OR' => array(
                        'Builder.builder_primarycity' => $channel_city_id,
                        'Builder.builder_secondarycity' => $channel_city_id,
                        'Builder.builder_tertiarycity' => $channel_city_id,
                        'Builder.city_4' => $channel_city_id,
                        'Builder.city_5' => $channel_city_id,
                    ), 'Builder.builder_approved' => '2', 'Builder.dummy_status' => $dummy_status)));

            $project_all_count = $this->Project->find('count', array('conditions' => array('Project.dummy_status' => $dummy_status, 'Project.city_id' => $channel_city_id)));

            $project_approve = $this->Project->find('count', array('conditions' => array('Project.city_id' => $channel_city_id, 'Project.proj_approved' => '1', 'Project.dummy_status' => $dummy_status)));

            $project_pending = $this->Project->find('count', array('conditions' => array('Project.city_id' => $channel_city_id, 'Project.proj_approved' => '2', 'Project.dummy_status' => $dummy_status)));
        }
        $this->set(compact('builder_all_count'));
        $this->set(compact('builder_approve'));
        $this->set(compact('builder_pending'));
        $this->set(compact('project_all_count'));
        $this->set(compact('project_approve'));
        $this->set(compact('project_pending'));

        if ($role_id == '7') { // for execution manager
            $lead_all_count = $this->Lead->find('count', array('conditions' => array('OR' => array('Lead.lead_managerprimary' => $user_id, 'Lead.lead_managersecondary' => $user_id), 'Lead.dummy_status' => $dummy_status)));

            $lead_new_client_count = $this->Lead->find('count', array('conditions' => array('OR' => array('Lead.lead_managerprimary' => $user_id, 'Lead.lead_managersecondary' => $user_id), 'Lead.dummy_status' => $dummy_status, 'Lead.lead_source != 3')));

            $lead_old_client_count = $this->Lead->find('count', array('conditions' => array('OR' => array('Lead.lead_managerprimary' => $user_id, 'Lead.lead_managersecondary' => $user_id), 'Lead.dummy_status' => $dummy_status, 'Lead.lead_source' => '3')));
        } else if ($role_id == '14') { //phone officer
            $lead_all_count = $this->Lead->find('count', array('conditions' => array('Lead.lead_phoneofficer' => $user_id, 'Lead.dummy_status' => $dummy_status)));
            $lead_old_client_count = $this->Lead->find('count', array('conditions' => array('Lead.lead_phoneofficer' => $user_id, 'Lead.dummy_status' => $dummy_status, 'Lead.lead_source' => '3')));
            $lead_new_client_count = $this->Lead->find('count', array('conditions' => array('Lead.lead_phoneofficer' => $user_id, 'Lead.dummy_status' => $dummy_status, 'Lead.lead_source != 3')));
        } else if ($role_id == '5') { //Associate
            $lead_all_count = $this->Lead->find('count', array('conditions' => array('Lead.lead_associate' => $user_id, 'Lead.dummy_status' => $dummy_status)));
            $lead_old_client_count = $this->Lead->find('count', array('conditions' => array('Lead.lead_associate' => $user_id, 'Lead.dummy_status' => $dummy_status, 'Lead.lead_source' => '3')));
            $lead_new_client_count = $this->Lead->find('count', array('conditions' => array('Lead.lead_associate' => $user_id, 'Lead.dummy_status' => $dummy_status, 'Lead.lead_source != 3')));
        } else if ($role_id == '15') { //Accounts
            $lead_all_count = $this->Lead->find('count', array('conditions' => array('NOT' => array('Lead.city_id' => 2), 'Lead.lead_associate' => $user_id, 'Lead.dummy_status' => $dummy_status)));
            $lead_old_client_count = $this->Lead->find('count', array('conditions' => array('NOT' => array('Lead.city_id' => 2), 'Lead.lead_associate' => $user_id, 'Lead.dummy_status' => $dummy_status, 'Lead.lead_source' => '3')));
            $lead_new_client_count = $this->Lead->find('count', array('conditions' => array('NOT' => array('Lead.city_id' => 2), 'Lead.lead_associate' => $user_id, 'Lead.dummy_status' => $dummy_status, 'Lead.lead_source != 3')));
        } else if ($channel_city_id > '1') { //Not global{
            $lead_all_count = $this->Lead->find('count', array('conditions' => array('Lead.city_id' => $channel_city_id, 'Lead.dummy_status' => $dummy_status)));
            $lead_old_client_count = $this->Lead->find('count', array('conditions' => array('Lead.city_id' => $channel_city_id, 'Lead.dummy_status' => $dummy_status, 'Lead.lead_source' => '3')));
            $lead_new_client_count = $this->Lead->find('count', array('conditions' => array('Lead.city_id' => $channel_city_id, 'Lead.dummy_status' => $dummy_status, 'Lead.lead_source != 3')));
        } else {
            $lead_all_count = $this->Lead->find('count', array('conditions' => array('Lead.dummy_status' => $dummy_status)));
            $lead_old_client_count = $this->Lead->find('count', array('conditions' => array('Lead.dummy_status' => $dummy_status, 'Lead.lead_source' => '3')));
            $lead_new_client_count = $this->Lead->find('count', array('conditions' => array('Lead.dummy_status' => $dummy_status, 'Lead.lead_source != 3')));
        }
        $this->set(compact('lead_all_count'));
        $this->set(compact('lead_new_client_count'));
        $this->set(compact('lead_old_client_count'));

        $all_action = $this->ActionItem->find('count', array('conditions' => array('OR' => array('ActionItem.next_action_by' => $user_id, 'ActionItem.created_by_id' => $user_id))));
        $this->set(compact('all_action'));

        $all_action_pending = $this->ActionItem->find('count', array('conditions' => array('ActionItem.next_action_by' => $user_id, 'ActionItem.action_item_active' => 'Yes')));
        $this->set(compact('all_action_pending'));

        $event_all_count = $this->Event->find('count', array('conditions' => array('Event.dummy_status' => $dummy_status, 'Event.creator_id' => $user_id)));
        $this->set(compact('event_all_count'));

        // $log = $this->Lead->getDataSource()->getLog(false, false);       
        //debug($log);
        /*
          $self_id = $this->Auth->user("id");

          $this->Event->recursive = 1;
          $count_events = $this->Event->find('count', array('conditions' => array('DATE(Event.start_date)' => date('Y-m-d'), 'Event.user_id' => $self_id), 'order' => 'Event.start_date, Event.description'));
          $user = $this->User->find('first', array('conditions' => array('User.id' => $self_id), array()));
          $this->set('count_events', $count_events);
          $this->set('user', $user);
          if (!$self_id) {
          $this->Session->setFlash(sprintf(__('Invalid user', true), 'user'), 'error');
          $this->redirect(array('action' => 'index'));
          }

          $roles = $this->Role->find('all',array('conditions' => 'Role.id = '.$role_id));
          $this->set(compact('roles'));

          if (isset($this->data['User'])) {
          $this->User->validate = array(
          'fname' => array(// Field: first_name
          'notempty' => array(// Identifier name: notempty
          'rule' => array('notempty'), // Rule: notempty
          'message' => 'Please enter first name',
          ),
          'validChars' => array(
          'rule' => '/^[a-z. ]{2,}$/i',
          'message' => 'First name should only contain letters and dot(.), min 3 characters'
          ),
          ),
          'lname' => array(// Field: last_name

          'notempty' => array(// Identifier name: notempty

          'rule' => array('notempty'), // Rule: notempty
          'message' => 'Please enter last name',
          ),
          'validChars' => array(
          'rule' => '/^[a-z. ]{2,}$/i',
          'message' => 'Last name should only contain letters and dot(.), min 3 characters'
          ),
          ),
          'primary_mobile_number' => array(// Field: group_id
          'notempty' => array(// Identifier name: notempty
          'rule' => array('notempty'), // Rule: notempty
          'message' => 'Primary mobile number canot be blank',
          ),
          'numeric' => array(
          'rule' => array('numeric'),
          'message' => 'Invalid mobile number'
          )
          )
          );

          if ($this->User->save($this->data['User'])) {
          // $this->Session->setFlash('User has been saved.', 'success');
          $this->Session->setFlash(__('User has been saved.'), 'default', array('class' => 'alert_success'));
          $this->redirect(array('action' => 'dashboard'));
          } else {
          $this->Session->setFlash('Unable to update User.', 'error');
          }
          }
         */
    }

    function index() {

        $dummy_status = $this->Auth->user('dummy_status');

        $search_condition = array();

        if ($this->request->is('post') || $this->request->is('put')) {

            if (!empty($this->data['User']['search_value'])) {
                $search = $this->data['User']['search_value'];
                array_push($search_condition, array('OR' => array('User.fname' . ' LIKE' => "%" . mysql_escape_string(trim(strip_tags($search))) . "%", 'User.lname' . ' LIKE' => "%" . mysql_escape_string(trim(strip_tags($search))) . "%")));
            }
        }
        /*
          if($dummy_status){
          array_push($search_condition, array('User.dummy_status' => $dummy_status));

          }
         */

        $this->paginate['order'] = array('User.fname' => 'asc');

        $this->set('users', $this->paginate("User", $search_condition));



        $roles = $this->Role->find('list', array('fields' => array('id', 'role_name')));
        $this->set(compact('roles'));
        $channels = $this->Channel->find('list', array('fields' => array('id', 'channel_name')));
        $this->set(compact('channels'));
    }

    function login() {

        $this->layout = 'login';

        if ($this->request->is('post')) {

            if ($this->Auth->login()) {
                $arrLoginInfo = $this->request->data["User"];
                $details = $this->User->find('first', array(
                    'conditions' => array('company_email_id' => $arrLoginInfo["company_email_id"])
                ));
                return $this->redirect($this->Auth->redirect('users/home'));
                exit;
            } else {

                $this->Session->setFlash(__('Error: invalid username and/or password'), 'login_error');
            }
        }

        $this->set('isLoginPage', 1);
    }

    function home() {
        $this->layout = 'home';
        $user_id = $this->Auth->user('id');
        $dummy_status = $this->Auth->user('dummy_status');
        $role_id = array();
        $travel_role_id = array();
        $role_field = $this->GroupsUser->find('list', array('fields' => array('channel_field', 'role_field'), 'conditions' => array('industry' => 1))); // real easte
        $travel_role_field = $this->GroupsUser->find('list', array('fields' => array('channel_field', 'role_field'), 'conditions' => array('industry' => 2))); // travel
        foreach ($role_field as $key => $val) {
            // echo $key;
            if ($this->Auth->user($val)) {
                $role_id[] = $this->Auth->user($key) . ',' . $this->Auth->user($val);
            }
        }

        foreach ($travel_role_field as $key => $val) {
            // echo $key;
            if ($this->Auth->user($val)) {
                $travel_role_id[] = $this->Auth->user($key) . ',' . $this->Auth->user($val);
            }
        }

        $this->set(compact('travel_role_id'));
        //  pr($role_id);
        /*
          $roles = $this->Role->find('list',array(
          'fields' => array('Role.id', 'Role.group_id'),
          'joins' => array(
          array(
          'table' => 'groups_users',
          'alias' => 'GroupsUser',
          'conditions' => array(
          'Role.group_id = GroupsUser.id'
          )
          )
          ),
          'conditions' => array('GroupsUser.industry' => 1),

          )); // for real easte
         * 
         */
        $roles = $this->Role->find('list', array('fields' => array('Role.id', 'Role.group_id'))); // for real easte
        //pr($roles);
        $this->set(compact('roles'));

        $this->set('role_id', $role_id);


        $user = $this->User->findById($user_id);

        if ($this->request->data) {

            $this->User->id = $user_id;



            if ($this->User->save($this->request->data)) {
                // $this->log('special', 'foo');
                $this->Session->setFlash('User has been updated.', 'success');
                // $this->redirect(array('controller' => 'messages','action' => 'index','users','my-users'));
                $this->redirect(array('action' => 'home'));
            } else {
                $this->Session->setFlash('Unable to edit User.', 'error');
            }
        }





        $groups = $this->GroupsUser->find('list', array('fields' => array('id', 'name')));
        $this->set(compact('groups'));

        $channels = $this->Channel->find('all', array('fields' => array('Channel.id', 'City.city_name')));
        foreach ($channels as $key => $val) {
            //$a[] =  $val['Channel']['id'];
            $channel_city[$val['Channel']['id']] = $val['City']['city_name'];
        }

        $this->set(compact('channel_city'));

        $codes = $this->LookupValueLeadsCountry->find('all', array('fields' => array('LookupValueLeadsCountry.id', 'LookupValueLeadsCountry.value', 'LookupValueLeadsCountry.code')));
        $codes = Set::combine($codes, '{n}.LookupValueLeadsCountry.id', array('%s: %s', '{n}.LookupValueLeadsCountry.value', '{n}.LookupValueLeadsCountry.code'));
        $this->set(compact('codes'));

        $cities = $this->City->find('list', array('fields' => array('id', 'city_name'), 'conditions' => array('dummy_status' => $dummy_status), 'order' => 'city_name asc'));
        $this->set(compact('cities'));

        $this->request->data = $user;
        //  pr($channels);
    }

    function logout() {
        $this->Session->delete('role_id');
        $this->redirect($this->Auth->logout());
    }

    public function add() {


        $dummy_status = $this->Auth->user('dummy_status');

        $condition_dummy_status = array('dummy_status' => $dummy_status);

        if ($this->request->is('post')) {

            //Set User password

            $password = $this->generateRandomAlpha(4);
            $password = $password . '' . $this->generateRandomNumber(3);
            $password = $password . '' . $this->generateRandomAlpha(2);
            $password = $password . '' . $this->generateRandomNumber(1);
            $this->request->data['User']['password'] = $password;
            $this->request->data['User']['dummy_status'] = $dummy_status;
            $this->User->create();
            if ($this->User->save($this->request->data)) {

                //Send email with password
                $Email = new CakeEmail();
                $Email->viewVars(array(
                    'name' => $this->request->data['User']['fname'],
                    'email' => $this->request->data['User']['company_email_id'],
                    'password' => $password
                ));
                //$company_email_id = $this->request->data['User']['company_email_id'];
                $company_email_id = 'infra@sumanus.com';
                $Email->template('registration_password', 'default')->emailFormat('html')->to($company_email_id)->from('admin@silkrouters.com')->subject('Silkrouters - Your Password')->send();
                $this->Session->setFlash('User has been saved.', 'success');
                $this->redirect(array('controller' => 'messages', 'action' => 'index', 'users', 'my-users'));
                // $this->redirect(array('action' => 'index'));
            } else {
                $this->Session->setFlash('Unable to add User.', 'error');
            }
        }



        $channels = $this->Channel->find('all', array('fields' => array('Channel.id', 'Channel.channel_name', 'Channel.channel_role'), 'conditions' => array('Channel.dummy_status' => 2), 'order' => 'channel_role asc')); // for real easte
        $this->set(compact('channels'));

        $role_id = array();

        $this->set('role_id', $role_id);


        $cities = $this->City->find('list', array('fields' => array('id', 'city_name'), 'conditions' => $condition_dummy_status, 'order' => 'city_name asc'));
        $this->set(compact('cities'));
        $roles = $this->Role->find('all');
        $this->set('roles', $roles);

        $codes = $this->LookupValueLeadsCountry->find('all', array('fields' => array('LookupValueLeadsCountry.id', 'LookupValueLeadsCountry.value', 'LookupValueLeadsCountry.code')));
        $codes = Set::combine($codes, '{n}.LookupValueLeadsCountry.id', array('%s: %s', '{n}.LookupValueLeadsCountry.value', '{n}.LookupValueLeadsCountry.code'));
        $this->set(compact('codes'));

        $groups = $this->GroupsUser->find('all', array('conditions' => array('GroupsUser.industry' => 1)));
        $this->set(compact('groups'));

        $travel_groups = $this->GroupsUser->find('all', array('conditions' => array('GroupsUser.industry' => 2))); // for travel
        $this->set(compact('travel_groups'));
        //   pr($groups);
    }

    function edit($id = null, $mode = null) {

        $dummy_status = $this->Auth->user('dummy_status');

        $condition_dummy_status = array('dummy_status' => $dummy_status);

        $id = base64_decode($id);
        $this->set(compact('mode'));

        if (!$id) {            // If id is not passed from the URL
            $this->Session->setFlash(sprintf(__('Invalid user', true), 'user'), 'error');   // Set flash error message

            $this->redirect(array('action' => 'index'));       // Redirect back to list page with the message
        }
        $user = $this->User->findById($id);



        if ($this->request->data) {

            $this->User->id = $id;



            if ($this->User->save($this->request->data)) {
                // $this->log('special', 'foo');
                $this->Session->setFlash('User has been updated.', 'success');
                $this->redirect(array('controller' => 'messages', 'action' => 'index', 'users', 'my-users'));
                //   $this->redirect(array('action' => 'index'));
            } else {
                $this->Session->setFlash('Unable to edit User.', 'error');
            }
        }




        $cities = $this->City->find('list', array('fields' => array('id', 'city_name'), 'conditions' => $condition_dummy_status, 'order' => 'city_name asc'));
        $this->set(compact('cities'));


        $role_id = array();
        $role_field = $this->GroupsUser->find('list', array('fields' => array('id', 'role_field')));

        foreach ($role_field as $field) {
            $role_id[] = $user['User'][$field];
        }
        $role_id = array_filter($role_id);
        $this->set('role_id', $role_id);

        $channel_id = array();
        $channel_fields = $this->GroupsUser->find('list', array('fields' => array('id', 'channel_field')));

        foreach ($channel_fields as $channel_field) {
            $channel_id[] = $user['User'][$channel_field];
        }
        $channel_id = array_filter($channel_id);
        $this->set('channel_id', $channel_id);

        $roles = $this->Role->find('all', array('conditions' => array('GroupsUser.industry' => 1))); // for real easte
        $this->set('roles', $roles);

        $travel_roles = $this->Role->find('all', array('conditions' => array('GroupsUser.industry' => 2))); // for real easte
        $this->set(compact('travel_roles'));
        // pr($roles);

        $channels = $this->Channel->find('all', array('fields' => array('Channel.id', 'Channel.channel_name', 'Channel.channel_role'), 'conditions' => array('Channel.dummy_status' => 2), 'order' => 'channel_role asc')); // for real easte
        $this->set(compact('channels'));

        //  $travel_channels = $this->Channel->find('all', array('fields' => array('Channel.id','Channel.channel_name','Channel.channel_role'), 'conditions' => array('Channel.dummy_status' => 2,'Channel.channel_industry' => 2), 'order' => 'channel_role asc')); // for travel
        //  $this->set(compact('travel_channels'));

        $groups = $this->GroupsUser->find('all', array('conditions' => array('GroupsUser.industry' => 1))); // for real easte
        $this->set(compact('groups'));

        $travel_groups = $this->GroupsUser->find('all', array('conditions' => array('GroupsUser.industry' => 2))); // for travel
        $this->set(compact('travel_groups'));

        $codes = $this->LookupValueLeadsCountry->find('all', array('fields' => array('LookupValueLeadsCountry.id', 'LookupValueLeadsCountry.value', 'LookupValueLeadsCountry.code')));
        $codes = Set::combine($codes, '{n}.LookupValueLeadsCountry.id', array('%s: %s', '{n}.LookupValueLeadsCountry.value', '{n}.LookupValueLeadsCountry.code'));
        $this->set(compact('codes'));

        $this->request->data = $user;
    }

    function group() {

        $search_condition = array();


        if ($this->request->is('post') || $this->request->is('put')) {
            if (!empty($this->data['GroupsUser']['search_value'])) {
                $search = $this->data['GroupsUser']['search_value'];
                array_push($search_condition, array('GroupsUser.name' . ' LIKE' => mysql_escape_string(trim(strip_tags($search))) . "%"));
            }
        }

        $this->set('groups', $this->paginate("GroupsUser", $search_condition));
    }

    public function group_add() {

        if ($this->request->is('post') || $this->request->data('put')) {
            // pr($this->request->data['GroupsUser']['role_field']);
            $role_field = $this->request->data['GroupsUser']['role_field'];
            $channel_field = $this->request->data['GroupsUser']['channel_field'];

            $this->GroupsUser->set($this->data);

            if ($this->GroupsUser->validates() == true) {

                if ($this->GroupsUser->save($this->request->data)) {
                    $this->User->query("ALTER TABLE `users` ADD " . $role_field . " INT( 2 ) NULL");
                    $this->User->query("ALTER TABLE `users` ADD " . $channel_field . " INT( 2 ) NULL");
                    $this->Session->setFlash('Group has been saved.', 'success');
                    $this->redirect(array('controller' => 'users', 'action' => 'group'));
                } else {
                    $this->Session->setFlash('Unable to add Group.', 'error');
                }
            }
        }

        $industries = $this->LookupValueActivityIndustry->find('list', array('fields' => array('id', 'value'), 'order' => 'value asc'));
        $this->set(compact('industries'));
    }

    /**
     * Edit group and on sussess or failure, shows messages.
     * 
     * @param intiger $id Either value or null.
     * @return null    This method does not return any data.
     */
    public function group_edit($id = null, $mode = null) {
        $id = base64_decode($id);
        $this->set(compact('mode'));

        if (!$id) {
            throw new NotFoundException(__('Invalid Group'));
        }

        $role = $this->GroupsUser->findById($id);

        if (!$role) {
            throw new NotFoundException(__('Invalid Group'));
        }

        if ($this->request->data) {

            $this->GroupsUser->id = $id;
            if ($this->GroupsUser->save($this->request->data)) {
                $this->Session->setFlash('Your changes have been submitted.', 'success');
                $this->redirect(array('controller' => 'users', 'action' => 'group'));
            } else {
                $this->Session->setFlash('Unable to update.', 'failure');
            }
        }

        $industries = $this->LookupValueActivityIndustry->find('list', array('fields' => array('id', 'value'), 'order' => 'value asc'));
        $this->set(compact('industries'));

        if (!$this->request->data) {
            $this->request->data = $role;
        }
    }

    function delete($id = null) {

        if ($this->User->delete($id)) {
            $this->Session->setFlash('User has been deleted.', 'success');
            $this->redirect(array('action' => 'index'));
        } else {
            $this->Session->setFlash('Unable to delete User.', 'error');
            $this->redirect(array('action' => 'index'));
        }
    }

    public function demo() {
        $this->layout = '';
    }

}